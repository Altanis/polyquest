use strum::EnumCount;
use tokio::runtime::EnterGuard;

use crate::utils::config;

use crate::{
    connection::packets::UpgradeStats, game::entity::ai::{TankBot, AI}, seconds_to_ticks, utils::config::BASE_TANK_RADIUS,
};


use super::{
    super::projectile_entity::{
        ProjectileEntity,
        ProjectileType,
    },
    turret::Turret,
};

/// The identities for every entity.
#[derive(Debug, Clone, PartialEq, PartialOrd)]
pub struct EntityIdentity
{
    pub turrets: Vec<Turret>,
    pub sides: u8,
    pub max_health: f32,
    pub upgrades: Vec<EntityIdentityIds>,
    /// How much the opacity of the entity goes down when turning invisible. Cannot be invisible if
    /// < 0.
    pub opacity_decrement: f32,
    /// The damage exerted upon collision.
    pub damage_exertion: f32,
    pub base_speed: f32,
    /// The amount of XP the killer gains. -1 if not not fixed.
    pub score_yield: f32,
    /// The base FOV of a tank. -1 if inapplicable.
    pub base_fov: f32,
    /// The level requirement to play the tank.
    pub level_requirement: u8,
    /// The radius of the entity. -1 if not fixed.
    pub radius: f32,
    /// The elasticity of the entity.
    pub elasticity: f32,
    /// The maximum stat investments for each stat.
    pub max_stat_investments: [u8; UpgradeStats::COUNT],
    /// Whether or not the entity should respond to angle inputs.
    pub respond_to_angle_input: bool,

    // The ID of the identity.
    pub id: u8,
    // /// The category of the entity.
    pub category: TankCategories,
}

/// The different categories of tanks.
#[derive(Debug, PartialEq, PartialOrd, Clone, strum::EnumCount)]
pub enum TankCategories
{
    Destroyer,
    Drone,
    Factory,
    Smasher,
    Spammer,
    Trapper,
    Sniper,
    Fighter,
    Illegal,
}

#[derive(
    Debug, Clone, Copy, PartialEq, PartialOrd, strum::EnumCount, serde::Deserialize, strum::EnumIter,
)]
pub enum EntityIdentityIds
{
    Projectile = 0,
    Square = 1,
    Triangle = 2,
    SmallCrasher = 3,
    LargeCrasher = 4,
    Pentagon = 5,
    AlphaPentagon = 6,
    BasicTank = 7,
    Twin = 8,
    FlankGuard = 9,
    Sniper = 10,
    MachineGun = 11,
    TripleShot = 12,
    QuadTank = 13,
    TwinFlank = 14,
    Assassin = 15,
    Hunter = 16,
    Destroyer = 17,
    Gunner = 18,
    Triplet = 19,
    PentaShot = 20,
    SpreadShot = 21,
    OctoTank = 22,
    TripleTwin = 23,
    Ranger = 24,
    Stalker = 25,
    Predator = 26,
    Streamliner = 27,
    Sprayer = 28,
    Annihilator = 29,
    TriAngle = 30,
    Booster = 31,
    Fighter = 32,
    Smasher = 33,
    Landmine = 34,
    Spike = 35,
    MegaSmasher = 36,
    AutoGunner = 37,
    Overlord = 38,
    Overseer = 39,
    Manager = 40,
    Hybrid = 41,
    Trapper = 42,
    TriTrapper = 43,
    GunnerTrapper = 44,
    OverTrapper = 45,
    MegaTrapper = 46,
    AutoTrapper = 47,
    Battleship = 48,
    Necromancer = 49,
    Factory = 50,
    Spectator = 51,
    // Railgun = 52
}

impl TryInto<EntityIdentityIds> for u8
{
    type Error = ();

    fn try_into(self) -> Result<EntityIdentityIds, Self::Error>
    {
        match self {
            0 => Ok(EntityIdentityIds::Projectile),
            1 => Ok(EntityIdentityIds::Square),
            2 => Ok(EntityIdentityIds::Triangle),
            3 => Ok(EntityIdentityIds::SmallCrasher),
            4 => Ok(EntityIdentityIds::LargeCrasher),
            5 => Ok(EntityIdentityIds::Pentagon),
            6 => Ok(EntityIdentityIds::AlphaPentagon),
            7 => Ok(EntityIdentityIds::BasicTank),
            8 => Ok(EntityIdentityIds::Twin),
            9 => Ok(EntityIdentityIds::FlankGuard),
            10 => Ok(EntityIdentityIds::Sniper),
            11 => Ok(EntityIdentityIds::MachineGun),
            12 => Ok(EntityIdentityIds::TripleShot),
            13 => Ok(EntityIdentityIds::QuadTank),
            14 => Ok(EntityIdentityIds::TwinFlank),
            15 => Ok(EntityIdentityIds::Assassin),
            16 => Ok(EntityIdentityIds::Hunter),
            17 => Ok(EntityIdentityIds::Destroyer),
            18 => Ok(EntityIdentityIds::Gunner),
            19 => Ok(EntityIdentityIds::Triplet),
            20 => Ok(EntityIdentityIds::PentaShot),
            21 => Ok(EntityIdentityIds::SpreadShot),
            22 => Ok(EntityIdentityIds::OctoTank),
            23 => Ok(EntityIdentityIds::TripleTwin),
            24 => Ok(EntityIdentityIds::Ranger),
            25 => Ok(EntityIdentityIds::Stalker),
            26 => Ok(EntityIdentityIds::Predator),
            27 => Ok(EntityIdentityIds::Streamliner),
            28 => Ok(EntityIdentityIds::Sprayer),
            29 => Ok(EntityIdentityIds::Annihilator),
            30 => Ok(EntityIdentityIds::TriAngle),
            31 => Ok(EntityIdentityIds::Booster),
            32 => Ok(EntityIdentityIds::Fighter),
            33 => Ok(EntityIdentityIds::Smasher),
            34 => Ok(EntityIdentityIds::Landmine),
            35 => Ok(EntityIdentityIds::Spike),
            36 => Ok(EntityIdentityIds::MegaSmasher),
            37 => Ok(EntityIdentityIds::AutoGunner),
            38 => Ok(EntityIdentityIds::Overlord),
            39 => Ok(EntityIdentityIds::Overseer),
            40 => Ok(EntityIdentityIds::Manager),
            41 => Ok(EntityIdentityIds::Hybrid),
            42 => Ok(EntityIdentityIds::Trapper),
            43 => Ok(EntityIdentityIds::TriTrapper),
            44 => Ok(EntityIdentityIds::GunnerTrapper),
            45 => Ok(EntityIdentityIds::OverTrapper),
            46 => Ok(EntityIdentityIds::MegaTrapper),
            47 => Ok(EntityIdentityIds::AutoTrapper),
            48 => Ok(EntityIdentityIds::Battleship),
            49 => Ok(EntityIdentityIds::Necromancer),
            50 => Ok(EntityIdentityIds::Factory),
            51 => Ok(EntityIdentityIds::Spectator),
            // 52 => Ok(EntityIdentityIds::Railgun),
            _ => Err(()),
        }
    }
}

impl TryInto<EntityIdentity> for EntityIdentityIds
{
    type Error = ();

    fn try_into(self) -> Result<EntityIdentity, Self::Error>
    {
        match self {
            EntityIdentityIds::Square => Ok(get_square_identity()),
            EntityIdentityIds::Triangle => Ok(get_triangle_identity()),
            EntityIdentityIds::SmallCrasher => Ok(get_small_crasher_identity()),
            EntityIdentityIds::LargeCrasher => Ok(get_large_crasher_identity()),
            EntityIdentityIds::Pentagon => Ok(get_pentagon_identity()),
            EntityIdentityIds::AlphaPentagon => Ok(get_alpha_pentagon_identity()),
            EntityIdentityIds::BasicTank => Ok(get_basic_tank_identity()),
            EntityIdentityIds::Twin => Ok(get_twin_identity()),
            EntityIdentityIds::FlankGuard => Ok(get_flank_guard_identity()),
            EntityIdentityIds::Sniper => Ok(get_sniper_identity()),
            EntityIdentityIds::MachineGun => Ok(get_machine_gun_identity()),
            EntityIdentityIds::TripleShot => Ok(get_triple_shot_identity()),
            EntityIdentityIds::TwinFlank => Ok(get_twin_flank_identity()),
            EntityIdentityIds::QuadTank => Ok(get_quad_tank_identity()),
            EntityIdentityIds::Assassin => Ok(get_assassin_identity()),
            EntityIdentityIds::Hunter => Ok(get_hunter_identity()),
            EntityIdentityIds::Destroyer => Ok(get_destroyer_identity()),
            EntityIdentityIds::Gunner => Ok(get_gunner_identity()),
            EntityIdentityIds::Triplet => Ok(get_triplet_identity()),
            EntityIdentityIds::PentaShot => Ok(get_penta_shot_identity()),
            EntityIdentityIds::SpreadShot => Ok(get_spread_shot_identity()),
            EntityIdentityIds::OctoTank => Ok(get_octo_tank_identity()),
            EntityIdentityIds::TripleTwin => Ok(get_triple_twin_identity()),
            EntityIdentityIds::Ranger => Ok(get_ranger_identity()),
            EntityIdentityIds::Stalker => Ok(get_stalker_identity()),
            EntityIdentityIds::Predator => Ok(get_predator_identity()),
            EntityIdentityIds::Streamliner => Ok(get_streamliner_identity()),
            EntityIdentityIds::Sprayer => Ok(get_sprayer_identity()),
            EntityIdentityIds::Annihilator => Ok(get_annihilator_identity()),
            EntityIdentityIds::TriAngle => Ok(get_tri_angle_identity()),
            EntityIdentityIds::Booster => Ok(get_booster_identity()),
            EntityIdentityIds::Fighter => Ok(get_fighter_identity()),
            EntityIdentityIds::Smasher => Ok(get_smasher_identity()),
            EntityIdentityIds::Landmine => Ok(get_landmine_identity()),
            EntityIdentityIds::Spike => Ok(get_spike_identity()),
            EntityIdentityIds::MegaSmasher => Ok(get_mega_smasher_identity()),
            EntityIdentityIds::AutoGunner => Ok(get_auto_gunner_identity()),
            EntityIdentityIds::Overlord => Ok(get_overlord_identity()),
            EntityIdentityIds::Overseer => Ok(get_overseer_identity()),
            EntityIdentityIds::Manager => Ok(get_manager_identity()),
            EntityIdentityIds::Hybrid => Ok(get_hybrid_identity()),
            EntityIdentityIds::Trapper => Ok(get_trapper_identity()),
            EntityIdentityIds::TriTrapper => Ok(get_tri_trapper_identity()),
            EntityIdentityIds::GunnerTrapper => Ok(get_gunner_trapper_identity()),
            EntityIdentityIds::OverTrapper => Ok(get_over_trapper_identity()),
            EntityIdentityIds::MegaTrapper => Ok(get_mega_trapper_identity()),
            EntityIdentityIds::AutoTrapper => Ok(get_auto_trapper_identity()),
            EntityIdentityIds::Battleship => Ok(get_battleship_identity()),
            EntityIdentityIds::Necromancer => Ok(get_necromancer_identity()),
            EntityIdentityIds::Factory => Ok(get_factory_identity()),
            EntityIdentityIds::Spectator => Ok(get_spectator_identity()),
            // EntityIdentityIds::Railgun => Ok(get_railgun_identity()),
            _ => Err(()),
        }
    }
}

pub fn get_projectile_identity(sides: u8) -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::new(),
        sides,
        max_health: 0.0,
        upgrades: Vec::new(),
        opacity_decrement: 0.0,
        damage_exertion: 0.0,
        base_speed: 0.0,
        score_yield: 0.0,
        base_fov: 0.0,
        level_requirement: 0,
        radius: 0.0,
        elasticity: 0.1,
        // shooting_cycle: vec![],
        id: EntityIdentityIds::Projectile as u8,
        max_stat_investments: [0, 0, 0, 0, 0, 0, 0, 0, 0],
        respond_to_angle_input: true,
        category: TankCategories::Illegal,
    }
}

pub fn get_square_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::new(),
        sides: 4,
        max_health: 5.0,
        upgrades: Vec::new(),
        opacity_decrement: -1.0,
        damage_exertion: 5.0,
        base_speed: 1.0,
        score_yield: 10.0,
        base_fov: 1.0,
        level_requirement: 0,
        radius: 20.0,
        elasticity: 2.0,
        // shooting_cycle: vec![],
        id: EntityIdentityIds::Square as u8,
        max_stat_investments: [0, 0, 0, 0, 0, 0, 0, 0, 0],
        respond_to_angle_input: true,
        category: TankCategories::Illegal,
    }
}

pub fn get_triangle_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::new(),
        sides: 3,
        max_health: 15.0,
        upgrades: Vec::new(),
        opacity_decrement: -1.0,
        damage_exertion: 7.0,
        base_speed: 1.0,
        score_yield: 15.0,
        base_fov: 1.0,
        level_requirement: 0,
        radius: 20.0,
        elasticity: 2.0,
        // shooting_cycle: vec![],
        id: EntityIdentityIds::Triangle as u8,
        max_stat_investments: [0, 0, 0, 0, 0, 0, 0, 0, 0],
        respond_to_angle_input: true,
        category: TankCategories::Illegal,
    }
}

pub fn get_small_crasher_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::new(),
        sides: 3,
        max_health: 10.0,
        upgrades: Vec::new(),
        opacity_decrement: -1.0,
        damage_exertion: 8.0,
        base_speed: 1.5,
        score_yield: 15.0,
        base_fov: 1.1,
        level_requirement: 0,
        radius: 15.0,
        elasticity: 2.0,
        // shooting_cycle: vec![],
        id: EntityIdentityIds::SmallCrasher as u8,
        max_stat_investments: [0, 0, 0, 0, 0, 0, 0, 0, 0],
        respond_to_angle_input: true,
        category: TankCategories::Illegal,
    }
}

pub fn get_large_crasher_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::new(),
        sides: 3,
        max_health: 30.0,
        upgrades: Vec::new(),
        opacity_decrement: -1.0,
        damage_exertion: 9.0,
        base_speed: 1.5,
        score_yield: 25.0,
        base_fov: 1.1,
        level_requirement: 0,
        radius: 25.0,
        elasticity: 2.0,
        // shooting_cycle: vec![],
        id: EntityIdentityIds::LargeCrasher as u8,
        max_stat_investments: [0, 0, 0, 0, 0, 0, 0, 0, 0],
        respond_to_angle_input: true,
        category: TankCategories::Illegal,
    }
}

pub fn get_pentagon_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::new(),
        sides: 4,
        max_health: 65.0,
        upgrades: Vec::new(),
        opacity_decrement: -1.0,
        damage_exertion: 8.0,
        base_speed: 1.0,
        score_yield: 260.0,
        base_fov: 1.0,
        level_requirement: 0,
        radius: 40.0,
        elasticity: 1.0,
        // shooting_cycle: vec![],
        id: EntityIdentityIds::Pentagon as u8,
        max_stat_investments: [0, 0, 0, 0, 0, 0, 0, 0, 0],
        respond_to_angle_input: true,
        category: TankCategories::Illegal,
    }
}

pub fn get_alpha_pentagon_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::new(),
        sides: 4,
        max_health: 5000.0,
        upgrades: Vec::new(),
        opacity_decrement: -1.0,
        damage_exertion: 12.0,
        base_speed: 0.3,
        score_yield: 2600.0,
        base_fov: 1.0,
        level_requirement: 0,
        radius: 100.0,
        elasticity: 0.1,
        // shooting_cycle: vec![],
        id: EntityIdentityIds::AlphaPentagon as u8,
        max_stat_investments: [0, 0, 0, 0, 0, 0, 0, 0, 0],
        respond_to_angle_input: true,
        category: TankCategories::Illegal,
    }
}

pub fn get_basic_tank_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([Turret {
            angle: 0.0,
            x_offset: 0.0,
            size_factor: 1.0,
            length: 57,
            width: 24,
            recoil: 0.5,
            scatter_rate: 1.0,
            friction: 0.997,
            projectile_type: ProjectileType::Bullet,
            projectile_count: 0,
            max_projectile_count: -1,
            projectile_damage: 1.5,
            projectile_penetration: 1.0,
            projectile_speed: 15.0,
            bullet_lifetime: 1.0,
            reload: 1.0,
            delay: 0.0,
            reload_time: 0.0,
            cycle_position: 0.0,
            turrets: vec![],
            elasticity: 1.0,
            ai: None,
        }]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![
            EntityIdentityIds::Spectator,
            EntityIdentityIds::Twin,
            EntityIdentityIds::Sniper,
            EntityIdentityIds::MachineGun,
            EntityIdentityIds::FlankGuard,
            EntityIdentityIds::Smasher,
        ],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.0,
        level_requirement: 0,
        radius: -1.0,
        elasticity: 5.0,
        // shooting_cycle: vec![vec![0]],
        id: EntityIdentityIds::BasicTank as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Spammer,
    }
}

pub fn get_twin_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([
            Turret {
                angle: 0.0,
                x_offset: -16.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.0,
                projectile_penetration: 0.9,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 0.0,
                x_offset: 16.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.0,
                projectile_penetration: 0.9,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.5,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
        ]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![
            EntityIdentityIds::TripleShot,
            EntityIdentityIds::QuadTank,
            EntityIdentityIds::TwinFlank,
        ],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.0,
        level_requirement: 15,
        radius: -1.0,
        elasticity: 5.0,
        // shooting_cycle: vec![vec![0], vec![1]],
        id: EntityIdentityIds::Twin as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Spammer,
    }
}

pub fn get_flank_guard_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([
            Turret {
                angle: 0.0,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.5,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: std::f32::consts::PI,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 48,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.5,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
        ]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![
            EntityIdentityIds::TriAngle,
            EntityIdentityIds::QuadTank,
            EntityIdentityIds::TwinFlank,
        ],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.0,
        level_requirement: 15,
        radius: -1.0,
        elasticity: 5.0,
        // shooting_cycle: vec![vec![0, 1]],
        id: EntityIdentityIds::FlankGuard as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Spammer,
    }
}

pub fn get_sniper_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([Turret {
            angle: 0.0,
            x_offset: 0.0,
            size_factor: 1.0,
            length: 66,
            width: 24,
            recoil: 1.5,
            scatter_rate: 0.3,
            friction: 1.0,
            projectile_type: ProjectileType::Bullet,
            projectile_count: 0,
            max_projectile_count: -1,
            projectile_damage: 1.5,
            projectile_penetration: 1.0,
            projectile_speed: 25.0,
            bullet_lifetime: 1.0,
            reload: 1.5,
            delay: 0.0,
            reload_time: 0.0,
            cycle_position: 0.0,
            turrets: vec![],
            elasticity: 0.5,
            ai: None,
        }]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![
            EntityIdentityIds::Assassin,
            EntityIdentityIds::Overseer,
            EntityIdentityIds::Hunter,
            EntityIdentityIds::Trapper,
        ],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.1,
        level_requirement: 15,
        radius: -1.0,
        elasticity: 5.0,
        // shooting_cycle: vec![vec![0]],
        id: EntityIdentityIds::Sniper as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Sniper,
    }
}

pub fn get_machine_gun_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([Turret {
            angle: 0.0,
            x_offset: 0.0,
            size_factor: 1.0,
            length: 57,
            width: 22,
            recoil: 1.0,
            scatter_rate: 3.0,
            friction: 0.995,
            projectile_type: ProjectileType::Bullet,
            projectile_count: 0,
            max_projectile_count: -1,
            projectile_damage: 0.7,
            projectile_penetration: 1.0,
            projectile_speed: 15.0,
            bullet_lifetime: 1.0,
            reload: 0.5,
            delay: 0.0,
            reload_time: 0.0,
            cycle_position: 0.0,
            turrets: vec![],
            elasticity: 1.0,
            ai: None,
        }]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![
            EntityIdentityIds::Destroyer,
            EntityIdentityIds::Gunner,
            EntityIdentityIds::Sprayer,
        ],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.0,
        level_requirement: 15,
        radius: -1.0,
        elasticity: 5.0,
        // shooting_cycle: vec![vec![0]],
        id: EntityIdentityIds::MachineGun as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Spammer,
    }
}

pub fn get_triple_shot_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([
            Turret {
                angle: -std::f32::consts::FRAC_PI_4,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.0,
                projectile_penetration: 0.9,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 0.0,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.0,
                projectile_penetration: 0.9,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: std::f32::consts::FRAC_PI_4,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.0,
                projectile_penetration: 0.9,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
        ]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![
            EntityIdentityIds::Triplet,
            EntityIdentityIds::PentaShot,
            EntityIdentityIds::SpreadShot,
        ],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.0,
        level_requirement: 30,
        radius: -1.0,
        elasticity: 5.0,
        // shooting_cycle: vec![vec![0, 1, 2]],
        id: EntityIdentityIds::TripleShot as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Spammer,
    }
}

pub fn get_twin_flank_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([
            Turret {
                angle: 0.0,
                x_offset: -16.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.0,
                projectile_penetration: 0.9,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 0.0,
                x_offset: 16.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.0,
                projectile_penetration: 0.9,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.5,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: std::f32::consts::PI,
                x_offset: -16.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.0,
                projectile_penetration: 0.9,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: std::f32::consts::PI,
                x_offset: 16.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.0,
                projectile_penetration: 0.9,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.5,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
        ]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![EntityIdentityIds::TripleTwin, EntityIdentityIds::Battleship],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.0,
        level_requirement: 30,
        radius: -1.0,
        elasticity: 5.0,
        // shooting_cycle: vec![vec![1, 3], vec![0, 2]],
        id: EntityIdentityIds::TwinFlank as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Spammer,
    }
}

pub fn get_quad_tank_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([
            Turret {
                angle: 0.0,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.0,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: std::f32::consts::FRAC_PI_2,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.0,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: std::f32::consts::PI,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.0,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: -std::f32::consts::FRAC_PI_2,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.0,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
        ]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![EntityIdentityIds::OctoTank],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.0,
        level_requirement: 30,
        radius: -1.0,
        elasticity: 5.0,
        // shooting_cycle: vec![vec![0, 1, 2, 3]],
        id: EntityIdentityIds::QuadTank as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Spammer,
    }
}

pub fn get_assassin_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([Turret {
            angle: 0.0,
            x_offset: 0.0,
            size_factor: 1.0,
            length: 72,
            width: 24,
            recoil: 1.5,
            scatter_rate: 0.3,
            friction: 1.0,
            projectile_type: ProjectileType::Bullet,
            projectile_count: 0,
            max_projectile_count: -1,
            projectile_damage: 1.5,
            projectile_penetration: 1.0,
            projectile_speed: 25.0,
            bullet_lifetime: 1.0,
            reload: 2.0,
            delay: 0.0,
            reload_time: 0.0,
            cycle_position: 0.0,
            turrets: vec![],
            elasticity: 0.5,
            ai: None,
        }]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![EntityIdentityIds::Ranger, EntityIdentityIds::Stalker],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.3,
        level_requirement: 30,
        radius: -1.0,
        elasticity: 5.0,
        // shooting_cycle: vec![vec![0]],
        id: EntityIdentityIds::Assassin as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Sniper,
    }
}

pub fn get_hunter_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([
            Turret {
                angle: 0.0,
                x_offset: 0.0,
                size_factor: 0.7,
                length: 66,
                width: 24,
                recoil: 0.5,
                scatter_rate: 0.3,
                friction: 1.0,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.0,
                projectile_penetration: 1.0,
                projectile_speed: 23.0,
                bullet_lifetime: 1.0,
                reload: 2.5,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 0.5,
                ai: None,
            },
            Turret {
                angle: 0.0,
                x_offset: 0.0,
                size_factor: 0.7,
                length: 57,
                width: 33,
                recoil: 0.5,
                scatter_rate: 0.3,
                friction: 1.0,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.0,
                projectile_penetration: 1.0,
                projectile_speed: 23.0,
                bullet_lifetime: 1.0,
                reload: 2.5,
                delay: 0.2,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 0.5,
                ai: None,
            },
        ]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![EntityIdentityIds::Predator, EntityIdentityIds::Streamliner],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.2,
        level_requirement: 30,
        radius: -1.0,
        elasticity: 5.0,
        // shooting_cycle: vec![vec![0], vec![1]],
        id: EntityIdentityIds::Hunter as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Sniper,
    }
}

pub fn get_destroyer_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([Turret {
            angle: 0.0,
            x_offset: 0.0,
            size_factor: 1.0,
            length: 57,
            width: 41,
            recoil: 9.0,
            scatter_rate: 1.0,
            friction: 0.999,
            projectile_type: ProjectileType::Bullet,
            projectile_count: 0,
            max_projectile_count: -1,
            projectile_damage: 4.5,
            projectile_penetration: 4.0,
            projectile_speed: 13.0,
            bullet_lifetime: 1.0,
            reload: 4.0,
            delay: 0.0,
            reload_time: 0.0,
            cycle_position: 0.0,
            turrets: vec![],
            elasticity: 0.0,
            ai: None,
        }]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![EntityIdentityIds::Annihilator, EntityIdentityIds::Hybrid],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.0,
        level_requirement: 30,
        radius: -1.0,
        elasticity: 5.0,
        // shooting_cycle: vec![vec![0]],
        id: EntityIdentityIds::Destroyer as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Destroyer,
    }
}

pub fn get_gunner_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([
            Turret {
                angle: 0.0,
                x_offset: -19.2,
                size_factor: 1.0,
                length: 39,
                width: 15,
                recoil: 0.1,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.7,
                projectile_penetration: 0.45,
                projectile_speed: 16.5,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.5,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 0.0,
                x_offset: 19.2,
                size_factor: 1.0,
                length: 39,
                width: 15,
                recoil: 0.1,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.7,
                projectile_penetration: 0.45,
                projectile_speed: 16.5,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.75,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 0.0,
                x_offset: -10.4,
                size_factor: 1.0,
                length: 51,
                width: 15,
                recoil: 0.1,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.7,
                projectile_penetration: 0.45,
                projectile_speed: 16.5,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 0.0,
                x_offset: 10.4,
                size_factor: 1.0,
                length: 51,
                width: 15,
                recoil: 0.1,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.7,
                projectile_penetration: 0.45,
                projectile_speed: 16.5,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.25,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
        ]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![
            EntityIdentityIds::AutoGunner,
            EntityIdentityIds::GunnerTrapper,
            EntityIdentityIds::Streamliner,
        ],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.0,
        level_requirement: 30,
        radius: -1.0,
        elasticity: 5.0,
        // shooting_cycle: vec![vec![1], vec![2], vec![0], vec![3]],
        id: EntityIdentityIds::Gunner as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Spammer,
    }
}

pub fn get_auto_gunner_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([
            Turret {
                angle: 0.0,
                x_offset: -19.2,
                size_factor: 1.0,
                length: 39,
                width: 15,
                recoil: 0.1,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.7,
                projectile_penetration: 0.45,
                projectile_speed: 16.5,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.5,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 0.0,
                x_offset: 19.2,
                size_factor: 1.0,
                length: 39,
                width: 15,
                recoil: 0.1,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.7,
                projectile_penetration: 0.45,
                projectile_speed: 16.5,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.75,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 0.0,
                x_offset: -10.4,
                size_factor: 1.0,
                length: 51,
                width: 15,
                recoil: 0.1,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.7,
                projectile_penetration: 0.45,
                projectile_speed: 16.5,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 0.0,
                x_offset: 10.4,
                size_factor: 1.0,
                length: 51,
                width: 15,
                recoil: 0.1,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.7,
                projectile_penetration: 0.45,
                projectile_speed: 16.5,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.25,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 0.0,
                x_offset: 0.0,
                size_factor: 0.6,
                length: 32,
                width: 30,
                recoil: 0.3,
                scatter_rate: 0.1,
                friction: 0.995,
                projectile_type: ProjectileType::AutoBullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.75,
                projectile_penetration: 0.45,
                projectile_speed: 18.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.01,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: Some(AI::new(0, false, true, TankBot::Not, |_, _, _, _| true)),
            },
        ]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.0,
        level_requirement: 45,
        radius: -1.0,
        elasticity: 5.0,
        id: EntityIdentityIds::AutoGunner as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Spammer,
    }
}


pub fn get_triplet_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([
            Turret {
                angle: 0.0,
                x_offset: -16.0,
                size_factor: 1.0,
                length: 48,
                width: 24,
                recoil: 0.25,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.0,
                projectile_penetration: 0.9,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.5,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 0.0,
                x_offset: 16.0,
                size_factor: 1.0,
                length: 48,
                width: 24,
                recoil: 0.25,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.0,
                projectile_penetration: 0.9,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.5,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 0.0,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.25,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.0,
                projectile_penetration: 0.9,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
        ]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.0,
        level_requirement: 45,
        radius: -1.0,
        elasticity: 5.0,
        id: EntityIdentityIds::Triplet as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Spammer,
    }
}

pub fn get_penta_shot_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([
            Turret {
                angle: -std::f32::consts::FRAC_PI_4,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 48,
                width: 24,
                recoil: 0.35,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.825,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.66,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: std::f32::consts::FRAC_PI_4,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 48,
                width: 24,
                recoil: 0.35,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.825,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.66,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: -std::f32::consts::FRAC_PI_8,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.35,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.825,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.33,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: std::f32::consts::FRAC_PI_8,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.35,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.825,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.33,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 0.0,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 66,
                width: 24,
                recoil: 0.35,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.825,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
        ]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.0,
        level_requirement: 45,
        radius: -1.0,
        elasticity: 5.0,
        id: EntityIdentityIds::PentaShot as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Spammer,
    }
}

pub fn get_spread_shot_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([
            Turret {
                angle: 1.3089969,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 39,
                width: 17,
                recoil: 0.1,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.2,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 2.0,
                delay: 0.8333,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: -1.3089969,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 39,
                width: 17,
                recoil: 0.1,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.2,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 2.0,
                delay: 0.8333,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: std::f32::consts::FRAC_PI_3,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 43,
                width: 17,
                recoil: 0.1,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.2,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 2.0,
                delay: 0.6666,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: -std::f32::consts::FRAC_PI_3,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 43,
                width: 17,
                recoil: 0.1,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.2,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 2.0,
                delay: 0.6666,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: std::f32::consts::FRAC_PI_4,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 46,
                width: 17,
                recoil: 0.1,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.2,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 2.0,
                delay: 0.5,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: -std::f32::consts::FRAC_PI_4,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 46,
                width: 17,
                recoil: 0.1,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.2,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 2.0,
                delay: 0.5,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: std::f32::consts::FRAC_PI_6,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 50,
                width: 17,
                recoil: 0.1,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.2,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 2.0,
                delay: 0.3333,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: -std::f32::consts::FRAC_PI_6,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 50,
                width: 17,
                recoil: 0.1,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.2,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 2.0,
                delay: 0.3333,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 0.26179938,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 54,
                width: 17,
                recoil: 0.1,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.2,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 2.0,
                delay: 0.1666,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: -0.26179938,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 54,
                width: 17,
                recoil: 0.1,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.2,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 2.0,
                delay: 0.1666,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 0.0,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.1,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.2,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 2.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
        ]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.0,
        level_requirement: 45,
        radius: -1.0,
        elasticity: 5.0,
        id: EntityIdentityIds::SpreadShot as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Spammer,
    }
}

pub fn get_octo_tank_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([
            Turret {
                angle: -std::f32::consts::FRAC_PI_4,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.0,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.5,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: std::f32::consts::FRAC_PI_4,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.0,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.5,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: -2.3561944,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.0,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.5,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 2.3561944,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.0,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.5,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: std::f32::consts::PI,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.0,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: -std::f32::consts::FRAC_PI_2,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.0,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: std::f32::consts::FRAC_PI_2,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.0,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 0.0,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.0,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
        ]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.0,
        level_requirement: 45,
        radius: -1.0,
        elasticity: 5.0,
        // shooting_cycle: vec![vec![0]],
        id: EntityIdentityIds::OctoTank as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Spammer,
    }
}

pub fn get_triple_twin_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([
            Turret {
                angle: 0.0,
                x_offset: -16.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.75,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 0.0,
                x_offset: 16.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.75,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.5,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 2.0943951,
                x_offset: -16.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.75,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 2.0943951,
                x_offset: 16.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.75,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.5,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: -2.0943951,
                x_offset: -16.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.75,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: -2.0943951,
                x_offset: 16.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.75,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.5,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
        ]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.0,
        level_requirement: 45,
        radius: -1.0,
        elasticity: 5.0,
        // shooting_cycle: vec![vec![0]],
        id: EntityIdentityIds::TripleTwin as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Spammer,
    }
}

pub fn get_ranger_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([Turret {
            angle: 0.0,
            x_offset: 0.0,
            size_factor: 1.0,
            length: 72,
            width: 24,
            recoil: 1.5,
            scatter_rate: 0.3,
            friction: 1.0,
            projectile_type: ProjectileType::Bullet,
            projectile_count: 0,
            max_projectile_count: -1,
            projectile_damage: 1.5,
            projectile_penetration: 1.0,
            projectile_speed: 30.0,
            bullet_lifetime: 1.0,
            reload: 2.0,
            delay: 0.0,
            reload_time: 0.0,
            cycle_position: 0.0,
            turrets: vec![],
            elasticity: 1.0,
            ai: None,
        }]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.5,
        level_requirement: 45,
        radius: -1.0,
        elasticity: 5.0,
        // shooting_cycle: vec![vec![0]],
        id: EntityIdentityIds::Ranger as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Sniper,
    }
}

pub fn get_stalker_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([Turret {
            angle: 0.0,
            x_offset: 0.0,
            size_factor: 1.0,
            length: 72,
            width: 24,
            recoil: 1.5,
            scatter_rate: 0.3,
            friction: 1.0,
            projectile_type: ProjectileType::Bullet,
            projectile_count: 0,
            max_projectile_count: -1,
            projectile_damage: 1.5,
            projectile_penetration: 1.0,
            projectile_speed: 30.0,
            bullet_lifetime: 1.0,
            reload: 2.0,
            delay: 0.0,
            reload_time: 0.0,
            cycle_position: 0.0,
            turrets: vec![],
            elasticity: 1.0,
            ai: None,
        }]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![],
        opacity_decrement: 0.3,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.4,
        level_requirement: 45,
        radius: -1.0,
        elasticity: 5.0,
        // shooting_cycle: vec![vec![0]],
        id: EntityIdentityIds::Stalker as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Sniper,
    }
}

pub fn get_predator_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([
            Turret {
                angle: 0.0,
                x_offset: 0.0,
                size_factor: 0.7,
                length: 66,
                width: 24,
                recoil: 0.15,
                scatter_rate: 0.3,
                friction: 1.0,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.125,
                projectile_penetration: 1.0,
                projectile_speed: 25.0,
                bullet_lifetime: 1.0,
                reload: 3.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 0.0,
                x_offset: 0.0,
                size_factor: 0.7,
                length: 57,
                width: 33,
                recoil: 0.15,
                scatter_rate: 0.3,
                friction: 1.0,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.125,
                projectile_penetration: 1.0,
                projectile_speed: 25.0,
                bullet_lifetime: 1.0,
                reload: 3.0,
                delay: 0.2,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 0.0,
                x_offset: 0.0,
                size_factor: 0.7,
                length: 48,
                width: 41,
                recoil: 0.15,
                scatter_rate: 0.3,
                friction: 1.0,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.125,
                projectile_penetration: 1.0,
                projectile_speed: 25.0,
                bullet_lifetime: 1.0,
                reload: 3.0,
                delay: 0.4,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
        ]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.3,
        level_requirement: 45,
        radius: -1.0,
        elasticity: 5.0,
        // shooting_cycle: vec![vec![0]],
        id: EntityIdentityIds::Predator as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Sniper,
    }
}

pub fn get_streamliner_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([
            Turret {
                angle: 0.0,
                x_offset: 0.0,
                size_factor: 0.7,
                length: 66,
                width: 24,
                recoil: 0.1,
                scatter_rate: 0.3,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.3,
                projectile_penetration: 1.0,
                projectile_speed: 25.0,
                bullet_lifetime: 1.2,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 0.0,
                x_offset: 0.0,
                size_factor: 0.7,
                length: 60,
                width: 24,
                recoil: 0.1,
                scatter_rate: 0.3,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.3,
                projectile_penetration: 1.0,
                projectile_speed: 25.0,
                bullet_lifetime: 1.2,
                reload: 1.0,
                delay: 0.2,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 0.0,
                x_offset: 0.0,
                size_factor: 0.7,
                length: 54,
                width: 24,
                recoil: 0.1,
                scatter_rate: 0.3,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.3,
                projectile_penetration: 1.0,
                projectile_speed: 25.0,
                bullet_lifetime: 1.2,
                reload: 1.0,
                delay: 0.4,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 0.0,
                x_offset: 0.0,
                size_factor: 0.7,
                length: 42,
                width: 24,
                recoil: 0.1,
                scatter_rate: 0.3,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.3,
                projectile_penetration: 1.0,
                projectile_speed: 25.0,
                bullet_lifetime: 1.2,
                reload: 1.0,
                delay: 0.6,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 0.0,
                x_offset: 0.0,
                size_factor: 0.7,
                length: 36,
                width: 24,
                recoil: 0.1,
                scatter_rate: 0.3,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.3,
                projectile_penetration: 1.0,
                projectile_speed: 25.0,
                bullet_lifetime: 1.2,
                reload: 1.0,
                delay: 0.8,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
        ]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.2,
        level_requirement: 45,
        radius: -1.0,
        elasticity: 5.0,
        id: EntityIdentityIds::Streamliner as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Spammer,
    }
}

pub fn get_sprayer_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([
            Turret {
                angle: 0.0,
                x_offset: 0.0,
                size_factor: 0.7,
                length: 66,
                width: 24,
                recoil: 0.0,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.15,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.5,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 0.0,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 1.0,
                scatter_rate: 3.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.05,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 0.5,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
        ]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.0,
        level_requirement: 45,
        radius: -1.0,
        elasticity: 5.0,
        // shooting_cycle: vec![vec![0]],
        id: EntityIdentityIds::Sprayer as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Spammer,
    }
}

pub fn get_annihilator_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([Turret {
            angle: 0.0,
            x_offset: 0.0,
            size_factor: 1.0,
            length: 57,
            width: 57,
            recoil: 15.0,
            scatter_rate: 1.0,
            friction: 0.999,
            projectile_type: ProjectileType::Bullet,
            projectile_count: 0,
            max_projectile_count: -1,
            projectile_damage: 4.0,
            projectile_penetration: 6.0,
            projectile_speed: 13.0,
            bullet_lifetime: 1.0,
            reload: 4.0,
            delay: 0.0,
            reload_time: 0.0,
            cycle_position: 0.0,
            turrets: vec![],
            elasticity: 0.0,
            ai: None,
        }]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.0,
        level_requirement: 45,
        radius: -1.0,
        elasticity: 5.0,
        id: EntityIdentityIds::Annihilator as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Destroyer,
    }
}

pub fn get_tri_angle_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([
            Turret {
                angle: 0.0,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.2,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.5,
                projectile_penetration: 1.0,
                projectile_speed: 22.5,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 3.6651914,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 48,
                width: 24,
                recoil: 3.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.3,
                projectile_penetration: 1.0,
                projectile_speed: 17.5,
                bullet_lifetime: 0.75,
                reload: 1.0,
                delay: 0.5,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 2.617993,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 48,
                width: 24,
                recoil: 3.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.3,
                projectile_penetration: 1.0,
                projectile_speed: 17.5,
                bullet_lifetime: 0.75,
                reload: 1.0,
                delay: 0.5,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
        ]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![EntityIdentityIds::Booster, EntityIdentityIds::Fighter],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.0,
        level_requirement: 30,
        radius: -1.0,
        elasticity: 5.0,
        id: EntityIdentityIds::TriAngle as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Fighter,
    }
}

pub fn get_booster_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([
            Turret {
                angle: 0.0,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.1,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.5,
                projectile_penetration: 1.0,
                projectile_speed: 22.5,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 3.6651914,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 48,
                width: 24,
                recoil: 3.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.3,
                projectile_penetration: 1.0,
                projectile_speed: 17.5,
                bullet_lifetime: 0.75,
                reload: 1.0,
                delay: 0.33,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 2.356194,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 42,
                width: 24,
                recoil: 0.15,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.3,
                projectile_penetration: 1.0,
                projectile_speed: 17.5,
                bullet_lifetime: 0.75,
                reload: 1.0,
                delay: 0.66,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 2.617993,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 48,
                width: 24,
                recoil: 3.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.3,
                projectile_penetration: 1.0,
                projectile_speed: 17.5,
                bullet_lifetime: 0.75,
                reload: 1.0,
                delay: 0.33,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 3.92699,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 42,
                width: 24,
                recoil: 0.15,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.3,
                projectile_penetration: 1.0,
                projectile_speed: 17.5,
                bullet_lifetime: 0.75,
                reload: 1.0,
                delay: 0.66,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
        ]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.0,
        level_requirement: 45,
        radius: -1.0,
        elasticity: 5.0,
        id: EntityIdentityIds::Booster as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Fighter,
    }
}

pub fn get_fighter_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([
            Turret {
                angle: 0.0,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 57,
                width: 24,
                recoil: 0.2,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.5,
                projectile_penetration: 1.0,
                projectile_speed: 22.5,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: std::f32::consts::FRAC_PI_2,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 48,
                width: 24,
                recoil: 1.0,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.2,
                projectile_penetration: 1.0,
                projectile_speed: 17.5,
                bullet_lifetime: 0.75,
                reload: 1.5,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: -std::f32::consts::FRAC_PI_2,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 48,
                width: 24,
                recoil: 1.0,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.2,
                projectile_penetration: 1.0,
                projectile_speed: 17.5,
                bullet_lifetime: 0.75,
                reload: 1.5,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 3.6651914,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 48,
                width: 24,
                recoil: 3.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.3,
                projectile_penetration: 1.0,
                projectile_speed: 17.5,
                bullet_lifetime: 0.75,
                reload: 1.0,
                delay: 0.5,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 2.617993,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 48,
                width: 24,
                recoil: 3.5,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.3,
                projectile_penetration: 1.0,
                projectile_speed: 17.5,
                bullet_lifetime: 0.75,
                reload: 1.0,
                delay: 0.5,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
        ]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.0,
        level_requirement: 45,
        radius: -1.0,
        elasticity: 5.0,
        id: EntityIdentityIds::Fighter as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Fighter,
    }
}

pub fn get_smasher_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::new(),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![
            EntityIdentityIds::Landmine,
            EntityIdentityIds::Spike,
            EntityIdentityIds::MegaSmasher,
        ],
        opacity_decrement: -1.0,
        damage_exertion: 10.5,
        base_speed: 1.05,
        score_yield: -1.0,
        base_fov: 1.1,
        level_requirement: 30,
        radius: -1.0,
        elasticity: 11.0,
        id: EntityIdentityIds::Smasher as u8,
        max_stat_investments: [10, 10, 10, 0, 0, 0, 0, 10, 10],
        respond_to_angle_input: false,
        category: TankCategories::Smasher,
    }
}

pub fn get_landmine_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::new(),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![],
        opacity_decrement: 0.02,
        damage_exertion: 12.5,
        base_speed: 1.05,
        score_yield: -1.0,
        base_fov: 1.1,
        level_requirement: 45,
        radius: -1.0,
        elasticity: 11.0,
        id: EntityIdentityIds::Landmine as u8,
        max_stat_investments: [10, 10, 10, 0, 0, 0, 0, 10, 10],
        respond_to_angle_input: false,
        category: TankCategories::Smasher,
    }
}

pub fn get_mega_smasher_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::new(),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![],
        opacity_decrement: -1.0,
        damage_exertion: 13.0,
        base_speed: 0.98,
        score_yield: -1.0,
        base_fov: 1.1,
        level_requirement: 45,
        radius: -1.0,
        elasticity: 8.0,
        id: EntityIdentityIds::MegaSmasher as u8,
        max_stat_investments: [10, 10, 10, 0, 0, 0, 0, 10, 10],
        respond_to_angle_input: false,
        category: TankCategories::Smasher,
    }
}

pub fn get_spike_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::new(),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![],
        opacity_decrement: -1.0,
        damage_exertion: 13.0,
        base_speed: 1.05,
        score_yield: -1.0,
        base_fov: 1.1,
        level_requirement: 45,
        radius: -1.0,
        elasticity: 11.0,
        id: EntityIdentityIds::Spike as u8,
        max_stat_investments: [10, 10, 10, 0, 0, 0, 0, 10, 10],
        respond_to_angle_input: false,
        category: TankCategories::Smasher,
    }
}

// landmine has same stats as smasher, spike has higher speed and higher damage_exert
// spike 1.3 basespeed 15.0 damage exert 2.0 elasticity?


// pub fn get_auto_4_identity() -> EntityIdentity
// {
//     EntityIdentity
//     {
//         turrets: Vec::from(
//         [
//             Turret
//             {
//                 angle: std::f32::consts::FRAC_PI_4,
//                 x_offset: BASE_TANK_RADIUS,
//                 size_factor: 0.6,
//                 length: 32,
//                 width: 30,
//                 recoil: 0.3,
//                 scatter_rate: 1.0,
//                 friction: 0.995,
//                 projectile_type: ProjectileType::AutoBullet,
//                 projectile_damage: 1.5,
//                 projectile_penetration: 1.0,
//                 projectile_speed: 18.0,
//                 bullet_lifetime: 1.0,
//                 reload: 1.0,
//                 delay: 0.01,
//                 reload_time: 0.0,
//                 cycle_position: 0.0,
// turrets: vec![],
//                 elasticity: 1.0,
//                 ai: Some(AI::new(0, | _, _, _, _ | true))
//             },
//             Turret
//             {
//                 angle: 3.0 * std::f32::consts::FRAC_PI_4,
//                 x_offset: BASE_TANK_RADIUS,
//                 size_factor: 0.6,
//                 length: 32,
//                 width: 30,
//                 recoil: 0.3,
//                 scatter_rate: 1.0,
//                 friction: 0.995,
//                 projectile_type: ProjectileType::AutoBullet,
//                 projectile_damage: 1.5,
//                 projectile_penetration: 1.0,
//                 projectile_speed: 18.0,
//                 bullet_lifetime: 1.0,
//                 reload: 1.0,
//                 delay: 0.01,
//                 reload_time: 0.0,
//                 cycle_position: 0.0,
// turrets: vec![],
//                 elasticity: 1.0,
//                 ai: Some(AI::new(0, | _, _, _, _ | true))
//             },
//             Turret
//             {
//                 angle: -std::f32::consts::FRAC_PI_4,
//                 x_offset: BASE_TANK_RADIUS,
//                 size_factor: 0.6,
//                 length: 32,
//                 width: 30,
//                 recoil: 0.3,
//                 scatter_rate: 1.0,
//                 friction: 0.995,
//                 projectile_type: ProjectileType::AutoBullet,
//                 projectile_damage: 1.5,
//                 projectile_penetration: 1.0,
//                 projectile_speed: 18.0,
//                 bullet_lifetime: 1.0,
//                 reload: 1.0,
//                 delay: 0.01,
//                 reload_time: 0.0,
//                 cycle_position: 0.0,
// turrets: vec![],
//                 elasticity: 1.0,
//                 ai: Some(AI::new(0, | _, _, _, _ | true))
//             },
//             Turret
//             {
//                 angle: -3.0 * std::f32::consts::FRAC_PI_4,
//                 x_offset: BASE_TANK_RADIUS,
//                 size_factor: 0.6,
//                 length: 32,
//                 width: 30,
//                 recoil: 0.3,
//                 scatter_rate: 1.0,
//                 friction: 0.995,
//                 projectile_type: ProjectileType::AutoBullet,
//                 projectile_damage: 1.5,
//                 projectile_penetration: 1.0,
//                 projectile_speed: 18.0,
//                 bullet_lifetime: 1.0,
//                 reload: 1.0,
//                 delay: 0.01,
//                 reload_time: 0.0,
//                 cycle_position: 0.0,
// turrets: vec![],
//                 elasticity: 1.0,
//                 ai: Some(AI::new(0,  | _, _, _, _ | true))
//             },
//         ]),
//         sides: 0,
//         max_health: 100.0,
//         upgrades: vec![],
//         opacity_decrement: -1.0,
//         damage_exertion: 10.0,
//         base_speed: 1.0,
//         score_yield: -1.0,
//         base_fov: 1.0,
//         level_requirement: 30,
//         radius: -1.0,
//         elasticity: 5.0,
//         // shooting_cycle: vec![vec![0, 1]],
//         id: EntityIdentityIds::Auto4 as u8,
//         max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
//         respond_to_angle_input: true,
//     }
// }

pub fn get_overlord_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([
            Turret {
                angle: -std::f32::consts::FRAC_PI_2,
                x_offset: 0.0,
                size_factor: 1.15,
                length: 42,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.1,
                projectile_type: ProjectileType::Drone,
                projectile_count: 0,
                max_projectile_count: 2,
                projectile_damage: 0.7,
                projectile_penetration: 2.5,
                projectile_speed: 7.0,
                bullet_lifetime: -1.0,
                reload: 6.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 9.25,
                ai: None,
            },
            Turret {
                angle: std::f32::consts::FRAC_PI_2,
                x_offset: 0.0,
                size_factor: 1.15,
                length: 42,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.1,
                projectile_type: ProjectileType::Drone,
                projectile_count: 0,
                max_projectile_count: 2,
                projectile_damage: 0.7,
                projectile_penetration: 2.5,
                projectile_speed: 7.0,
                bullet_lifetime: -1.0,
                reload: 6.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 9.25,
                ai: None,
            },
            Turret {
                angle: 0.0,
                x_offset: 0.0,
                size_factor: 1.15,
                length: 42,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.1,
                projectile_type: ProjectileType::Drone,
                projectile_count: 0,
                max_projectile_count: 2,
                projectile_damage: 0.7,
                projectile_penetration: 2.5,
                projectile_speed: 7.0,
                bullet_lifetime: -1.0,
                reload: 6.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 9.25,
                ai: None,
            },
            Turret {
                angle: std::f32::consts::PI,
                x_offset: 0.0,
                size_factor: 1.15,
                length: 42,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.1,
                projectile_type: ProjectileType::Drone,
                projectile_count: 0,
                max_projectile_count: 2,
                projectile_damage: 0.7,
                projectile_penetration: 2.5,
                projectile_speed: 7.0,
                bullet_lifetime: -1.0,
                reload: 6.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 9.25,
                ai: None,
            },
        ]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.1,
        level_requirement: 45,
        radius: -1.0,
        elasticity: 5.0,
        id: EntityIdentityIds::Overlord as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Drone,
    }
}

pub fn get_overseer_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([
            Turret {
                angle: -std::f32::consts::FRAC_PI_2,
                x_offset: 0.0,
                size_factor: 1.15,
                length: 42,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.1,
                projectile_type: ProjectileType::Drone,
                projectile_count: 0,
                max_projectile_count: 4,
                projectile_damage: 0.7,
                projectile_penetration: 2.5,
                projectile_speed: 7.0,
                bullet_lifetime: -1.0,
                reload: 6.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 9.25,
                ai: None,
            },
            Turret {
                angle: std::f32::consts::FRAC_PI_2,
                x_offset: 0.0,
                size_factor: 1.15,
                length: 42,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.1,
                projectile_type: ProjectileType::Drone,
                projectile_count: 0,
                max_projectile_count: 4,
                projectile_damage: 0.7,
                projectile_penetration: 2.5,
                projectile_speed: 7.0,
                bullet_lifetime: -1.0,
                reload: 6.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 9.25,
                ai: None,
            },
        ]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![
            EntityIdentityIds::Overlord,
            EntityIdentityIds::Necromancer,
            EntityIdentityIds::Manager,
            EntityIdentityIds::OverTrapper,
            EntityIdentityIds::Battleship,
            EntityIdentityIds::Factory,
        ],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.1,
        level_requirement: 30,
        radius: -1.0,
        elasticity: 5.0,
        id: EntityIdentityIds::Overseer as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Drone,
    }
}

pub fn get_manager_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([Turret {
            angle: 0.0,
            x_offset: 0.0,
            size_factor: 1.15,
            length: 42,
            width: 24,
            recoil: 0.5,
            scatter_rate: 1.0,
            friction: 0.1,
            projectile_type: ProjectileType::Drone,
            projectile_count: 0,
            max_projectile_count: 8,
            projectile_damage: 0.7,
            projectile_penetration: 2.5,
            projectile_speed: 7.0,
            bullet_lifetime: -1.0,
            reload: 3.0,
            delay: 0.0,
            reload_time: 0.0,
            cycle_position: 0.0,
            turrets: vec![],
            elasticity: 9.25,
            ai: None,
        }]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![],
        opacity_decrement: 0.3,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.1,
        level_requirement: 45,
        radius: -1.0,
        elasticity: 5.0,
        id: EntityIdentityIds::Manager as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Drone,
    }
}

pub fn get_hybrid_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([
            Turret {
                angle: 0.0,
                x_offset: 0.0,
                size_factor: 1.0,
                length: 57,
                width: 41,
                recoil: 9.0,
                scatter_rate: 1.0,
                friction: 0.999,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 4.5,
                projectile_penetration: 4.0,
                projectile_speed: 13.0,
                bullet_lifetime: 1.0,
                reload: 4.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 0.0,
                ai: None,
            },
            Turret {
                angle: std::f32::consts::PI,
                x_offset: 0.0,
                size_factor: 1.15,
                length: 42,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.1,
                projectile_type: ProjectileType::Drone,
                projectile_count: 0,
                max_projectile_count: 2,
                projectile_damage: 0.7,
                projectile_penetration: 2.5,
                projectile_speed: 7.0,
                bullet_lifetime: -1.0,
                reload: 6.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 9.25,
                ai: None,
            },
        ]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.0,
        level_requirement: 45,
        radius: -1.0,
        elasticity: 5.0,
        // shooting_cycle: vec![vec![0]],
        id: EntityIdentityIds::Hybrid as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Destroyer,
    }
}

pub fn get_trapper_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([Turret {
            angle: 0.0,
            x_offset: 0.0,
            size_factor: 0.8,
            length: 36,
            width: 24,
            recoil: 0.5,
            scatter_rate: 1.0,
            friction: 0.9,
            projectile_type: ProjectileType::Trap,
            projectile_count: 0,
            max_projectile_count: -1,
            projectile_damage: 1.5,
            projectile_penetration: 2.0,
            projectile_speed: 30.0,
            bullet_lifetime: 8.0,
            reload: 1.5,
            delay: 0.0,
            reload_time: 0.0,
            cycle_position: 0.0,
            turrets: vec![],
            elasticity: 15.5,
            ai: None,
        }]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![
            EntityIdentityIds::TriTrapper,
            EntityIdentityIds::GunnerTrapper,
            EntityIdentityIds::OverTrapper,
            EntityIdentityIds::MegaTrapper,
            EntityIdentityIds::AutoTrapper,
        ],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.1,
        level_requirement: 30,
        radius: -1.0,
        elasticity: 5.0,
        // shooting_cycle: vec![vec![0]],
        id: EntityIdentityIds::Trapper as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Trapper,
    }
}

pub fn get_tri_trapper_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([
            Turret {
                angle: 0.0,
                x_offset: 0.0,
                size_factor: 0.8,
                length: 36,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.9,
                projectile_type: ProjectileType::Trap,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.5,
                projectile_penetration: 2.0,
                projectile_speed: 30.0,
                bullet_lifetime: 8.0,
                reload: 1.5,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 15.5,
                ai: None,
            },
            Turret {
                angle: std::f32::consts::TAU / 3.0,
                x_offset: 0.0,
                size_factor: 0.8,
                length: 36,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.9,
                projectile_type: ProjectileType::Trap,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.5,
                projectile_penetration: 2.0,
                projectile_speed: 30.0,
                bullet_lifetime: 8.0,
                reload: 1.5,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 15.5,
                ai: None,
            },
            Turret {
                angle: (std::f32::consts::TAU * 2.0) / 3.0,
                x_offset: 0.0,
                size_factor: 0.8,
                length: 36,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.9,
                projectile_type: ProjectileType::Trap,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.5,
                projectile_penetration: 2.0,
                projectile_speed: 30.0,
                bullet_lifetime: 8.0,
                reload: 1.5,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 15.5,
                ai: None,
            },
        ]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.1,
        level_requirement: 45,
        radius: -1.0,
        elasticity: 5.0,
        // shooting_cycle: vec![vec![0]],
        id: EntityIdentityIds::TriTrapper as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Trapper,
    }
}

pub fn get_gunner_trapper_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([
            Turret {
                angle: 0.0,
                x_offset: -9.6,
                size_factor: 1.0,
                length: 45,
                width: 12,
                recoil: 1.0,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.8,
                projectile_penetration: 1.0,
                projectile_speed: 16.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.66,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: 0.0,
                x_offset: 9.6,
                size_factor: 1.0,
                length: 45,
                width: 12,
                recoil: 1.0,
                scatter_rate: 1.0,
                friction: 0.995,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.8,
                projectile_penetration: 1.0,
                projectile_speed: 16.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.33,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            },
            Turret {
                angle: std::f32::consts::PI,
                x_offset: 0.0,
                size_factor: 0.8,
                length: 36,
                width: 31,
                recoil: 1.0,
                scatter_rate: 1.0,
                friction: 0.9,
                projectile_type: ProjectileType::Trap,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.5,
                projectile_penetration: 2.0,
                projectile_speed: 30.0,
                bullet_lifetime: 8.0,
                reload: 3.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 15.5,
                ai: None,
            },
        ]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.1,
        level_requirement: 45,
        radius: -1.0,
        elasticity: 5.0,
        // shooting_cycle: vec![vec![0]],
        id: EntityIdentityIds::GunnerTrapper as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Trapper,
    }
}

pub fn get_over_trapper_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([
            Turret {
                angle: std::f32::consts::TAU / 3.0,
                x_offset: 0.0,
                size_factor: 1.15,
                length: 42,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.1,
                projectile_type: ProjectileType::Drone,
                projectile_count: 0,
                max_projectile_count: 2,
                projectile_damage: 0.7,
                projectile_penetration: 2.5,
                projectile_speed: 7.0,
                bullet_lifetime: -1.0,
                reload: 6.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 9.25,
                ai: None,
            },
            Turret {
                angle: (std::f32::consts::TAU * 2.0) / 3.0,
                x_offset: 0.0,
                size_factor: 1.15,
                length: 42,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.1,
                projectile_type: ProjectileType::Drone,
                projectile_count: 0,
                max_projectile_count: 2,
                projectile_damage: 0.7,
                projectile_penetration: 2.5,
                projectile_speed: 7.0,
                bullet_lifetime: -1.0,
                reload: 6.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 9.25,
                ai: None,
            },
            Turret {
                angle: 0.0,
                x_offset: 0.0,
                size_factor: 0.8,
                length: 36,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.9,
                projectile_type: ProjectileType::Trap,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.5,
                projectile_penetration: 2.0,
                projectile_speed: 30.0,
                bullet_lifetime: 8.0,
                reload: 1.5,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 15.5,
                ai: None,
            },
        ]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.1,
        level_requirement: 45,
        radius: -1.0,
        elasticity: 5.0,
        // shooting_cycle: vec![vec![0]],
        id: EntityIdentityIds::OverTrapper as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Trapper,
    }
}

pub fn get_mega_trapper_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([Turret {
            angle: 0.0,
            x_offset: 0.0,
            size_factor: 1.28,
            length: 36,
            width: 31,
            recoil: 0.5,
            scatter_rate: 1.0,
            friction: 0.9,
            projectile_type: ProjectileType::Trap,
            projectile_count: 0,
            max_projectile_count: -1,
            projectile_damage: 2.4,
            projectile_penetration: 3.2,
            projectile_speed: 30.0,
            bullet_lifetime: 8.0,
            // reload: 3.3,
            reload: 3.3,
            delay: 0.0,
            reload_time: 0.0,
            cycle_position: 0.0,
            turrets: vec![],
            elasticity: 30.5,
            ai: None,
        }]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.1,
        level_requirement: 45,
        radius: -1.0,
        elasticity: 5.0,
        // shooting_cycle: vec![vec![0]],
        id: EntityIdentityIds::MegaTrapper as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Trapper,
    }
}

pub fn get_auto_trapper_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([
            Turret {
                angle: 0.0,
                x_offset: 0.0,
                size_factor: 0.6,
                length: 32,
                width: 30,
                recoil: 0.3,
                scatter_rate: 0.1,
                friction: 0.995,
                projectile_type: ProjectileType::AutoBullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.5,
                projectile_penetration: 1.0,
                projectile_speed: 18.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.01,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: Some(AI::new(0, false, true, TankBot::Not, |_, _, _, _| true)),
            },
            Turret {
                angle: 0.0,
                x_offset: 0.0,
                size_factor: 0.8,
                length: 36,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.9,
                projectile_type: ProjectileType::Trap,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 1.5,
                projectile_penetration: 2.0,
                projectile_speed: 30.0,
                bullet_lifetime: 8.0,
                reload: 1.5,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 15.5,
                ai: None,
            },
        ]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.1,
        level_requirement: 45,
        radius: -1.0,
        elasticity: 5.0,
        // shooting_cycle: vec![vec![0]],
        id: EntityIdentityIds::AutoTrapper as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Trapper,
    }
}

pub fn get_battleship_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([
            Turret {
                angle: std::f32::consts::FRAC_PI_2,
                x_offset: 12.0,
                size_factor: 0.8,
                length: 45,
                width: 17,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.997,
                projectile_type: ProjectileType::Drone,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.23,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 0.1,
                ai: None,
            },
            Turret {
                angle: std::f32::consts::FRAC_PI_2,
                x_offset: -12.0,
                size_factor: 0.8,
                length: 45,
                width: 17,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.997,
                projectile_type: ProjectileType::Drone,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.23,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 0.1,
                ai: None,
            },
            Turret {
                angle: (3.0 * std::f32::consts::PI) / 2.0,
                x_offset: 12.0,
                size_factor: 0.8,
                length: 45,
                width: 17,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.997,
                projectile_type: ProjectileType::Drone,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.23,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 0.1,
                ai: None,
            },
            Turret {
                angle: (3.0 * std::f32::consts::PI) / 2.0,
                x_offset: -12.0,
                size_factor: 0.8,
                length: 45,
                width: 17,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.997,
                projectile_type: ProjectileType::Drone,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.23,
                projectile_penetration: 1.0,
                projectile_speed: 15.0,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 0.1,
                ai: None,
            },
        ]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.1,
        level_requirement: 45,
        radius: -1.0,
        elasticity: 5.0,
        id: EntityIdentityIds::Battleship as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Drone,
    }
}

pub fn get_necromancer_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([
            Turret {
                angle: -std::f32::consts::FRAC_PI_2,
                x_offset: 0.0,
                size_factor: 1.15,
                length: 44,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.1,
                projectile_type: ProjectileType::NecromancerDrone,
                projectile_count: 0,
                max_projectile_count: 11,
                projectile_damage: 0.83,
                projectile_penetration: 2.0,
                projectile_speed: 6.8,
                bullet_lifetime: -1.0,
                reload: 6.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 0.5,
                ai: None,
            },
            Turret {
                angle: std::f32::consts::FRAC_PI_2,
                x_offset: 0.0,
                size_factor: 1.15,
                length: 44,
                width: 24,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.1,
                projectile_type: ProjectileType::NecromancerDrone,
                projectile_count: 0,
                max_projectile_count: 11,
                projectile_damage: 0.83,
                projectile_penetration: 2.0,
                projectile_speed: 6.8,
                bullet_lifetime: -1.0,
                reload: 6.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 0.5,
                ai: None,
            },
        ]),
        sides: 4,
        max_health: 100.0,
        upgrades: vec![],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.1,
        level_requirement: 45,
        radius: -1.0,
        elasticity: 5.0,
        id: EntityIdentityIds::Necromancer as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Drone,
    }
}

pub fn get_factory_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::from([Turret {
            angle: 0.0,
            x_offset: 0.0,
            size_factor: 1.4,
            length: 42,
            width: 24,
            recoil: 0.5,
            scatter_rate: 1.0,
            friction: 0.55,
            projectile_type: ProjectileType::Minion,
            projectile_count: 0,
            max_projectile_count: 6,
            projectile_damage: 1.05,
            projectile_penetration: 4.0,
            projectile_speed: 8.4,
            bullet_lifetime: -1.0,
            reload: 3.0,
            delay: 0.0,
            reload_time: 0.0,
            cycle_position: 0.0,
            turrets: vec![Turret {
                angle: 0.0,
                x_offset: 0.0,
                size_factor: 0.55,
                length: 48,
                width: 29,
                recoil: 0.5,
                scatter_rate: 1.0,
                friction: 0.997,
                projectile_type: ProjectileType::Bullet,
                projectile_count: 0,
                max_projectile_count: -1,
                projectile_damage: 0.6,
                projectile_penetration: 0.4,
                projectile_speed: 17.5,
                bullet_lifetime: 1.0,
                reload: 1.0,
                delay: 0.0,
                reload_time: 0.0,
                cycle_position: 0.0,
                turrets: vec![],
                elasticity: 1.0,
                ai: None,
            }],
            elasticity: 0.5,
            ai: None,
        }]),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![],
        opacity_decrement: -1.0,
        damage_exertion: 10.0,
        base_speed: 1.0,
        score_yield: -1.0,
        base_fov: 1.1,
        level_requirement: 45,
        radius: -1.0,
        elasticity: 5.0,
        id: EntityIdentityIds::Factory as u8,
        max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
        respond_to_angle_input: true,
        category: TankCategories::Factory,
    }
}

pub fn get_spectator_identity() -> EntityIdentity
{
    EntityIdentity {
        turrets: Vec::new(),
        sides: 0,
        max_health: 100.0,
        upgrades: vec![],
        opacity_decrement: -1.0,
        damage_exertion: 0.0,
        base_speed: 2.0,
        score_yield: -1.0,
        base_fov: 2.0,
        level_requirement: 0,
        radius: -1.0,
        elasticity: 0.0,
        // shooting_cycle: vec![vec![0]],
        id: EntityIdentityIds::Spectator as u8,
        max_stat_investments: [0, 0, 0, 0, 0, 0, 0, 10, 0],
        respond_to_angle_input: true,
        category: TankCategories::Illegal,
    }
}

// pub fn get_railgun_identity() -> EntityIdentity
// {
//     EntityIdentity {
//         turrets: Vec::from([Turret {
//             angle: 0.0,
//             x_offset: 0.0,
//             size_factor: 0.2,
//             length: 57,
//             width: 57,
//             recoil: 10.0,
//             scatter_rate: 0.0,
//             friction: 0.999,
//             projectile_type: ProjectileType::Railgun { num_charges: 0, max_num_charges: seconds_to_ticks!(2.5) as u8, radius_increase: 2.5, has_shot: false },
//             projectile_count: 0,
//             max_projectile_count: -1,
//             projectile_damage: 4.0,
//             projectile_penetration: 6.0,
//             projectile_speed: 13.0,
//             bullet_lifetime: 1.0,
//             reload: 1.0,
//             delay: 0.0,
//             reload_time: 0.0,
//             cycle_position: 0.0,
//             turrets: vec![],
//             elasticity: 0.0,
//             ai: None,
//         }]),
//         sides: 0,
//         max_health: 100.0,
//         upgrades: vec![],
//         opacity_decrement: -1.0,
//         damage_exertion: 10.0,
//         base_speed: 1.0,
//         score_yield: -1.0,
//         base_fov: 1.0,
//         level_requirement: 45,
//         radius: -1.0,
//         elasticity: 5.0,
//         id: EntityIdentityIds::Railgun as u8,
//         max_stat_investments: [7, 7, 7, 7, 7, 7, 7, 7, 7],
//         respond_to_angle_input: true,
//         category: TankCategories::Destroyer,
//     }
// }

pub const LEVEL_TO_SCORE_TABLE: [f32; 45] = [
    0.0, 4.44, 13.87, 28.85, 50.02, 78.08, 113.76, 157.89, 211.36, 275.11, 350.20, 437.75, 538.99,
    655.25, 787.97, 938.70, 1109.12, 1301.06, 1516.48, 1757.51, 2026.45, 2325.79, 2658.19, 3026.55,
    3433.99, 3883.87, 4379.82, 4925.75, 5525.86, 6184.70, 6907.15, 7698.48, 8537.28, 9426.42,
    10368.9, 11367.93, 12426.9, 13549.41, 14739.27, 16000.52, 17337.45, 18754.59, 20256.77,
    21849.07, 23536.91,
];

pub fn get_score_from_level(level: u8) -> f32
{
    if level as usize > LEVEL_TO_SCORE_TABLE.len() {
        return LEVEL_TO_SCORE_TABLE[44];
    }

    LEVEL_TO_SCORE_TABLE[(level - 1) as usize]
}
